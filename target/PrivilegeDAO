/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package {package};import java.io.Serializable;import java.util.List;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.Query;import javax.persistence.EntityNotFoundException;import javax.persistence.Persistence;import softwareperson.framework.dao.exceptions.NonexistentEntityException;import softwareperson.framework.dtos.Search{to_replace}sDTO;import softwareperson.framework.entities.{to_replace};/** * * @author 260514b */public class {to_replace}DAO implements Serializable {    private static  final EntityManager em = null;        private static {to_replace}DAO instance = new {to_replace}DAO();        private {to_replace}DAO(){};        public static {to_replace}DAO instance(){        return instance;    }    public EntityManager getEntityManager() {            if(em == null){            EntityManagerFactory factory = Persistence.createEntityManagerFactory("test");            return factory.createEntityManager();        }        return em;                    }    public void create({to_replace} obj) {        EntityManager em = null;        try {            em = getEntityManager();            em.getTransaction().begin();            em.persist(obj);            em.getTransaction().commit();        } finally {            if (em != null) {                em.close();            }        }    }    public void edit({to_replace} obj) throws NonexistentEntityException, Exception {        EntityManager em = null;        try {            em = getEntityManager();            em.getTransaction().begin();            em.merge(obj);            em.getTransaction().commit();        } catch (Exception ex) {            throw ex;        } finally {            if (em != null) {                em.close();            }        }    }    public void destroy(Integer id) throws NonexistentEntityException {        EntityManager em = null;        try {            em = getEntityManager();            em.getTransaction().begin();            {to_replace} obj;            try {                obj = em.getReference({to_replace}.class, id);                obj.getId();            } catch (EntityNotFoundException enfe) {                throw new NonexistentEntityException("The obj with id " + id + " no longer exists.", enfe);            }            em.remove(obj);            em.getTransaction().commit();        } finally {            if (em != null) {                em.close();            }        }    }    public List<{to_replace}> find{to_replace}Entities() {        return find{to_replace}Entities(true, -1, -1);    }    public List<{to_replace}> find{to_replace}Entities(int maxResults, int firstResult) {        return find{to_replace}Entities(false, maxResults, firstResult);    }    private List<{to_replace}> find{to_replace}Entities(boolean all, int maxResults, int firstResult) {        EntityManager em = getEntityManager();        try {            Query q = em.createQuery("select object(o) from {to_replace} as o");            if (!all) {                q.setMaxResults(maxResults);                q.setFirstResult(firstResult);            }            return q.getResultList();        } finally {            em.close();        }    }    public {to_replace} find{to_replace}(Integer id) {        EntityManager em = getEntityManager();        try {            return em.find({to_replace}.class, id);        } finally {            em.close();        }    }    public int get{to_replace}Count() {        EntityManager em = getEntityManager();        try {            Query q = em.createQuery("select count(o) from {to_replace} as o");            return ((Long) q.getSingleResult()).intValue();        } finally {            em.close();        }    }        public List<{to_replace}> find{to_replace}Entities(Search{to_replace}sDTO searchDTO) {        EntityManager em = getEntityManager();        try {            Query q = em.createQuery("select object(o) from {to_replace} as o where o.{searchfield} like :{searchfield}");                 return q.setParameter("{searchfield}","%" + searchDTO.get{searchfield_getter}() + "%").getResultList();        } finally {            em.close();        }    }    }/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package {package};

import java.io.Serializable;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.Persistence;
import softwareperson.framework.dao.exceptions.NonexistentEntityException;
import softwareperson.framework.dtos.Search{to_replace}sDTO;
import softwareperson.framework.entities.{to_replace};


/**
 *
 * @author 260514b
 */
public class {to_replace}DAO implements Serializable {

    private static  final EntityManager em = null;
    
    private static {to_replace}DAO instance = new {to_replace}DAO();
    
    private {to_replace}DAO(){};
    
    public static {to_replace}DAO instance(){
        return instance;
    }

    public EntityManager getEntityManager() {
    
        if(em == null){
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("test");
            return factory.createEntityManager();
        }
        return em;
        
        
    }

    public void create({to_replace} obj) {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(obj);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void edit({to_replace} obj) throws NonexistentEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();

            em.getTransaction().begin();
            em.merge(obj);
            em.getTransaction().commit();
        } catch (Exception ex) {
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void destroy(Integer id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            {to_replace} obj;
            try {
                obj = em.getReference({to_replace}.class, id);
                obj.getId();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The obj with id " + id + " no longer exists.", enfe);
            }
            em.remove(obj);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<{to_replace}> find{to_replace}Entities() {
        return find{to_replace}Entities(true, -1, -1);
    }

    public List<{to_replace}> find{to_replace}Entities(int maxResults, int firstResult) {
        return find{to_replace}Entities(false, maxResults, firstResult);
    }

    private List<{to_replace}> find{to_replace}Entities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select object(o) from {to_replace} as o");
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

    public {to_replace} find{to_replace}(Integer id) {
        EntityManager em = getEntityManager();
        try {
            return em.find({to_replace}.class, id);
        } finally {
            em.close();
        }
    }

    public int get{to_replace}Count() {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select count(o) from {to_replace} as o");
            return ((Long) q.getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }
    
    public List<{to_replace}> find{to_replace}Entities(Search{to_replace}sDTO searchDTO) {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select object(o) from {to_replace} as o where o.{searchfield} like :{searchfield}");
      
           return q.setParameter("{searchfield}","%" + searchDTO.get{searchfield_getter}() + "%").getResultList();
        } finally {
            em.close();
        }
    }
    
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.softwareperson.dao;

import java.io.Serializable;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.Persistence;
import softwareperson.framework.dao.exceptions.NonexistentEntityException;
import softwareperson.framework.dtos.SearchPrivilegesDTO;
import softwareperson.framework.entities.Privilege;


/**
 *
 * @author 260514b
 */
public class PrivilegeDAO implements Serializable {

    private static  final EntityManager em = null;
    
    private static PrivilegeDAO instance = new PrivilegeDAO();
    
    private PrivilegeDAO(){};
    
    public static PrivilegeDAO instance(){
        return instance;
    }

    public EntityManager getEntityManager() {
    
        if(em == null){
            EntityManagerFactory factory = Persistence.createEntityManagerFactory("test");
            return factory.createEntityManager();
        }
        return em;
        
        
    }

    public void create(Privilege obj) {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(obj);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void edit(Privilege obj) throws NonexistentEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();

            em.getTransaction().begin();
            em.merge(obj);
            em.getTransaction().commit();
        } catch (Exception ex) {
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void destroy(Integer id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Privilege obj;
            try {
                obj = em.getReference(Privilege.class, id);
                obj.getId();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The obj with id " + id + " no longer exists.", enfe);
            }
            em.remove(obj);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<Privilege> findPrivilegeEntities() {
        return findPrivilegeEntities(true, -1, -1);
    }

    public List<Privilege> findPrivilegeEntities(int maxResults, int firstResult) {
        return findPrivilegeEntities(false, maxResults, firstResult);
    }

    private List<Privilege> findPrivilegeEntities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select object(o) from Privilege as o");
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

    public Privilege findPrivilege(Integer id) {
        EntityManager em = getEntityManager();
        try {
            return em.find(Privilege.class, id);
        } finally {
            em.close();
        }
    }

    public int getPrivilegeCount() {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select count(o) from Privilege as o");
            return ((Long) q.getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }
    
    public List<Privilege> findPrivilegeEntities(SearchPrivilegesDTO searchDTO) {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select object(o) from Privilege as o where o.name like :name");
      
           return q.setParameter("name","%" + searchDTO.getName() + "%").getResultList();
        } finally {
            em.close();
        }
    }
    
}
